#!/usr/bin/env python3
import os, sys, time

import digitalocean as do
import click
from tabulate import tabulate

HOME = os.path.expanduser("~")
TOKEN = open(HOME + "/.ssh/DigitalOceanToken").read().strip()
MANAGER = do.Manager(token=TOKEN)

CONTEXT_SETTINGS = dict(help_option_names=['-h', '-help'])

@click.group(context_settings=CONTEXT_SETTINGS)
def ocean():
    pass


@ocean.command()
@click.option("-d", "--droplets", is_flag=True, default=False, help="list droplets")
@click.option("-s", "--snapshots", is_flag=True, default=False, help="list snapshots")
@click.option("-i", "--images", is_flag=True, default=False, help="list images")
@click.option("-a", "--apps", is_flag=True, default=False, help="list app images")
@click.option("-r", "--regions", is_flag=True, default=False, help="list regions")
@click.option("-dm", "--domains", is_flag=True, default=False, help="list domains and subdomains")
@click.pass_context
def ls(ctx, droplets, snapshots, images, apps, regions, domains):
    """
    \b
    Option defaults to -d for droplets if unspecified.
    """
    if droplets:
        listDroplets(do_print=True)
    if snapshots:
        listSnapshots(do_print=True)
    if images:
        listImages(do_print=True)
    if apps:
        listImages("application", do_print=True)
    if regions:
        listRegions(do_print=True)
    if domains:
        listDomains(do_print=True)

    # if all the arguments are false
    if not any(ctx.params.values()):
        listDroplets()
    return


def listDroplets(do_print=False):
    droplets = MANAGER.get_all_droplets()
    data =[]
    for drop in droplets:
        data.append([drop.name, drop.status, drop.ip_address,
                     drop.private_ip_address, drop.id])

    if do_print:
        print(tabulate(data, headers=["name", "status", "ipv4", "local ip", "id"], tablefmt="presto"))
    return data


def listSnapshots(do_print=False):
    images = MANAGER.get_my_images()
    data = []
    for i in images:
        data.append([i.name, i.id, i.created_at])

    if do_print:
        print(tabulate(data, headers=["snapshot", "id", "timestamp"], tablefmt="presto"))
    return data


def listImages(image_type="", do_print=False):
    if image_type == "application":
        images = MANAGER.get_app_images()
    else:
        images = MANAGER.get_distro_images()

    data = []
    for i in images:
        data.append([i.distribution, i.name, i.id])

    if do_print:
        print(tabulate(data, headers=["distro", "ver", "id"], tablefmt="presto"))
    return data


def listRegions(do_print=False):
    available = MANAGER.get_all_regions()
    data = []
    for region in available:
        data.append((region.name, region.slug))
    data.sort(key = lambda x: x[0])

    if do_print:
        print(tabulate(data, headers=("Region", "Code"), tablefmt="presto"))
    return data


def listDomains(do_print=False):
    domains = MANAGER.get_all_domains()
    subdomains = []
    for d in domains:
        tld = d.name
        records = d.get_records()
        # search for subdomains (r.name is not null and r.type is A)
        for r in records:
            if r.name != "@" and r.type == "A":
                # valid subdomain with a redirect (or not)
                subdomains.append([tld, f"{r.name}.{tld}", r.data])

    if do_print:
        print(tabulate(subdomains, headers=("TLD", "Sub-Domain", "ipv4"), tablefmt="presto"))
    return subdomains


@ocean.command()
@click.option("-c", "--create", is_flag=True, default=False, help="create record")
@click.option("-d", "--delete", is_flag=True, default=False, help="delete record")
@click.argument("top_level_domain_name")
@click.argument("target_record", nargs=-1)
def domain(create, delete, top_level_domain_name, target_record):
    """
    usage: ocean domain -c url.com [A/AAAA/CNAME/MX/NS/SRV/CAA/TXT] [subdomain] [destination IP]
        eg: ocean domain -c url.com A wow 1.1.1.1 ==> creates A record for wow.url.com -> 1.1.1.1
    usage: ocean domain -d url.com [subdomain] ==> deletes subdomain.url.com records
    TODO: add support for more specific deletion of records
    """
    if not any((create, delete)):
        print("Must specify -c/--create or -d/--delete records")
        return

    tld = MANAGER.get_domain(top_level_domain_name)
    if create:
        record_type = target_record[0]
        subdomain = target_record[1]
        destination_ip = target_record[2]
        tld.create_new_domain_record(type=record_type,
                                     name=subdomain,
                                     data=destination_ip)
        print(f"Created domain record for: {subdomain}.{top_level_domain_name}")
        return

    if delete:
        records = tld.get_records()
        subdomain = target_record[0]
        for r in records:
            if r.name == subdomain:
                r.destroy()
                print(f"Destroyed domain record for: {subdomain}.{top_level_domain_name}")
                return


def getDroplet(name_or_id: str):
    try:
        for drop in MANAGER.get_all_droplets():
            if drop.name == name_or_id or str(drop.id) == name_or_id:
                return MANAGER.get_droplet(drop.id)
        raise AttributeError # droplet not found
    except AttributeError:
        print("No droplet with that name exists!")
        exit()


@ocean.command()
@click.argument("name_or_id")
def start(name_or_id):
    """
    \b
    Starts a powered-off droplet
    """
    droplet = getDroplet(name_or_id)
    droplet.power_on()
    print("Droplet \"" + name_or_id + "\" powered on.")
    return


@ocean.command()
@click.argument("name_or_id")
def stop(name_or_id):
    """
    \b
    Powers off a droplet
    """
    droplet = getDroplet(name_or_id)
    droplet.power_off()
    print("Droplet \"" + name_or_id + "\" powered off.")
    return


@ocean.command()
@click.argument("droplet_snapshot_name", nargs=-1)
@click.option("-c", "--create", is_flag=True, default=False, help="create a snapshot")
@click.option("-d", "--destroy", is_flag=True, default=False, help="delete a snapshot")
def snapshot(create, destroy, droplet_snapshot_name):
    """
    \b
    Power-off and take a snapshot of a droplet. Powers-on droplet afterwards.
    usage: ocean snapshot -c/--create [snapshot_name] [droplet_to_snapshot_name]
    usage: ocean snapshot -d/--destroy [snapshot_to_destroy_name]
    """
    if not any((create, destroy)):
        print("Must specify -c/--create or -d/--destroy")
        print("`ocean snapshot -h` for more")
        return

    if len(droplet_snapshot_name) == 1:
        snapshot_name = droplet_snapshot_name[0]
    elif len(droplet_snapshot_name) == 2:
        droplet_name = droplet_snapshot_name[0]
        snapshot_name = droplet_snapshot_name[1]

    snapshots = MANAGER.get_all_snapshots()

    if create:
        current_snapshot_count = len(snapshots)
        droplet = getDroplet(droplet_name)
        droplet.take_snapshot(snapshot_name, True, True)
        while len(MANAGER.get_all_snapshots()) <= current_snapshot_count:
            time.sleep(5)

        snapshots = MANAGER.get_all_snapshots()
        for s in snapshots:
            if s.name == snapshot_name or s.id == snapshot_name:
                print(f"Created snapshot ({snapshot_name}, {s.id})")
                time.sleep(5)
                start(droplet_name)
                print(f"Droplet ({droplet_name}) rebooted after snapshot")
                return

    if destroy:
        for s in snapshots:
            if s.name == snapshot_name or s.id == snapshot_name:
                s.destroy()
                print(f"Snapshot ({s.name}) destroyed")
                return
        print("No snapshot by that name/id to destroy")


@ocean.command()
@click.argument("name_or_id")
@click.option("-a", "--all", is_flag=True, default=False)
def reboot(name_or_id, all):
    """
    \b
    usage: ocean reboot [droplet name/id#]
    """
    if all:
        rebootAllDroplets()
    else:
        droplet = getDroplet(name_or_id)
        droplet.reboot()
    return


def rebootAllDroplets():
    droplets = MANAGER.get_all_droplets()
    for drop in droplets:
        drop.reboot()
    return


@ocean.command()
@click.argument("name")
@click.option("-r", "--region", default="sfo2", help="droplet region. Use \"ocean ls -r\" for more")
@click.option("-id", "--image_id", default=69439389, help="image/distribution id for droplet base")
def create(name, region, image_id):
    """
    \b
    usage: ocean create [droplet name] -r [region] -id [image id]
    """
    keys = MANAGER.get_all_sshkeys()
    try:
        droplet = do.Droplet(token=TOKEN,
                             name=name,
                             region=region,  # san-fran 2
                             image=str(image_id),  # Ubuntu 18.10 x64
                             size_slug="s-1vcpu-1gb",  # 1gb
                             private_networking=True,
                             ssh_keys=keys,
                             backups=False,
                             monitoring=True)
        droplet.create()
        time.sleep(5)
        droplet = getDroplet(name)
        print("Created droplet: " + name, droplet.id)
        print("IP addr: " + droplet.ip_address)
    except TypeError:
        print("Created droplet (err): " + name, droplet.id)
        print("IP addr: [could not fetch]")
    return droplet


@ocean.command()
@click.argument("name_or_id")
def destroy(name_or_id):
    """
    \b
    usage: ocean destroy [droplet name]
    """
    droplet = getDroplet(name_or_id)
    droplet.destroy()
    print("Destroyed droplet: " + name_or_id, droplet.id)
    print("IP addr: " + droplet.ip_address)
    return


@ocean.command()
@click.argument("name_or_id")
def ssh(name_or_id):
    """
    \b
    usage: ocean ssh [droplet name/id#]
    """
    droplet = getDroplet(name_or_id)
    ipaddr = droplet.ip_address
    os.system("ssh -i ~/.ssh/DigitalOcean root@" + ipaddr)
    return


@ocean.command()
@click.argument("name_or_id")
def sftp(name_or_id):
    """
    \b
    usage: ocean sftp [droplet name/id#]
    """
    droplet = getDroplet(name_or_id)
    ipaddr = droplet.ip_address
    os.system("sftp -i ~/.ssh/DigitalOcean root@" + ipaddr)
    return


if __name__ == '__main__':
    ocean()
