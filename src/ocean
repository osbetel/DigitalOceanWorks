#!/usr/bin/env python3
import os, sys, time

import digitalocean as do
import click
from tabulate import tabulate

HOME = os.path.expanduser("~")
TOKEN = open(HOME + "/.ssh/DigitalOceanToken").read().strip()
MANAGER = do.Manager(token=TOKEN)


CONTEXT_SETTINGS = dict(help_option_names=['-h', '-help'])

@click.group(context_settings=CONTEXT_SETTINGS)
def ocean():
    pass


@ocean.command()
@click.option("-d", "--droplets", is_flag=True, default=False, help="list droplets")
@click.option("-s", "--snapshots", is_flag=True, default=False, help="list snapshots")
@click.option("-i", "--images", is_flag=True, default=False, help="list images")
@click.option("-a", "--apps", is_flag=True, default=False, help="list app images")
@click.option("-r", "--regions", is_flag=True, default=False, help="list regions")
def ls(droplets, snapshots, images, apps, regions):
    """
    \b
    usage: ocean ls -d/-s/-i/-a/-r (defaults to -d)
    """
    if droplets:
        print(listDroplets())
    elif snapshots:
        print(listImages("snapshot"))
    elif images:
        print(listImages())
    elif apps:
        print(listImages("application"))
    elif regions:
        print(listRegions())
    else:
        print(listDroplets())
    return


def listDroplets():
    droplets = MANAGER.get_all_droplets()
    data =[]
    for drop in droplets:
        data.append([drop.name, drop.status, drop.ip_address,
                     drop.private_ip_address, drop.id])

    table = tabulate(data, headers=["name", "status", "ipv4", "local ip", "id"], tablefmt="presto")
    return table


def listImages(image_type=""):
    if image_type == "application":
        images = MANAGER.get_app_images()
    elif image_type == "snapshot":
        images = MANAGER.get_my_images()
    else:
        images = MANAGER.get_distro_images()

    metadata = []
    for i in images:
        metadata.append([i.distribution, i.name, i.id, i.size_gigabytes, i.created_at])
    return tabulate(metadata, headers=["distro", "ver", "id", "size", "created_at"], tablefmt="presto")


def listRegions():
    available = MANAGER.get_all_regions()
    r = []
    for reg in available:
        r.append((reg.name, reg.slug))
    r.sort(key = lambda x: x[0])
    return tabulate(r, headers=("Region", "Code"), tablefmt="presto")


def getDroplet(name_or_id: str):
    try:
        for drop in MANAGER.get_all_droplets():
            if drop.name == name_or_id or str(drop.id) == name_or_id:
                return MANAGER.get_droplet(drop.id)
        raise AttributeError # droplet not found
    except AttributeError:
        print("No droplet with that name exists!")
        exit()


@ocean.command()
@click.argument("name_or_id")
def start(name_or_id):
    """
    \b
    usage: ocean stop [droplet name/id#]
    """
    droplet = getDroplet(name_or_id)
    droplet.power_on()
    print("Droplet \"" + name_or_id + "\" powered on.")
    return


@ocean.command()
@click.argument("name_or_id")
def stop(name_or_id):
    """
    \b
    usage: ocean start [droplet name/id#]
    """
    droplet = getDroplet(name_or_id)
    droplet.power_off()
    print("Droplet \"" + name_or_id + "\" powered off.")
    return


@ocean.command()
@click.argument("droplet-name")
@click.argument("snapshot_name")
def snapshot(droplet_name, snapshot_name):
    """
    \b
    usage: ocean snapshot [droplet name/id#] [snapshot name]
    """
    droplet = getDroplet(droplet_name)
    droplet.take_snapshot(snapshot_name, True, True)
    return


@ocean.command()
@click.argument("name_or_id")
@click.option("-a", "--all", is_flag=True, default=False)
def reboot(name_or_id, all):
    """
    \b
    usage: ocean reboot [droplet name/id#]
    """
    if all:
        rebootAllDroplets()
    else:
        droplet = getDroplet(name_or_id)
        droplet.reboot()
    return


def rebootAllDroplets():
    droplets = MANAGER.get_all_droplets()
    for drop in droplets:
        drop.reboot()
    return


@ocean.command()
@click.argument("name")
@click.option("-r", "--region", default="sfo2", help="droplet region. Use \"ocean ls -r\" for more")
@click.option("-id", "--image_id", default=69439389, help="image/distribution id for droplet base")
def create(name, region, image_id):
    """
    \b
    usage: ocean create [droplet name] -r [region] -id [image id]
    """
    keys = MANAGER.get_all_sshkeys()
    try:
        droplet = do.Droplet(token=TOKEN,
                             name=name,
                             region=region,  # san-fran 2
                             image=str(image_id),  # Ubuntu 18.10 x64
                             size_slug="s-1vcpu-1gb",  # 1gb
                             private_networking=True,
                             ssh_keys=keys,
                             backups=False,
                             monitoring=True)
        droplet.create()
        time.sleep(5)
        droplet = getDroplet(name)
        print("Created droplet: " + name, droplet.id)
        print("IP addr: " + droplet.ip_address)
    except TypeError:
        print("Created droplet (err): " + name, droplet.id)
        print("IP addr: [could not fetch]")
    return droplet


@ocean.command()
@click.argument("name_or_id")
def destroy(name_or_id):
    """
    \b
    usage: ocean destroy [droplet name]
    """
    droplet = getDroplet(name_or_id)
    droplet.destroy()
    print("Destroyed droplet: " + name_or_id, droplet.id)
    print("IP addr: " + droplet.ip_address)
    return


@ocean.command()
@click.argument("name_or_id")
def ssh(name_or_id):
    """
    \b
    usage: ocean ssh [droplet name/id#]
    """
    droplet = getDroplet(name_or_id)
    ipaddr = droplet.ip_address
    os.system("ssh -i ~/.ssh/DigitalOcean root@" + ipaddr)
    return


@ocean.command()
@click.argument("name_or_id")
def sftp(name_or_id):
    """
    \b
    usage: ocean sftp [droplet name/id#]
    """
    droplet = getDroplet(name_or_id)
    ipaddr = droplet.ip_address
    os.system("sftp -i ~/.ssh/DigitalOcean root@" + ipaddr)
    return


if __name__ == '__main__':
    ocean()
